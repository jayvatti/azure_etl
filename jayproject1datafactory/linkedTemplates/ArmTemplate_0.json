{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "jayproject1datafactory"
		},
		"AzureBlob_realistic_customers_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlob_realistic_customers'"
		},
		"AzurePostgreSql_SOURCE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzurePostgreSql_SOURCE'"
		},
		"AzureSQLDatabase_SINK_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSQLDatabase_SINK'"
		},
		"CosmosDB_Database_SOURCE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDB_Database_SOURCE'"
		},
		"AzureSQLDatabase_SINK_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "project1sqltargetserver.database.windows.net"
		},
		"AzureSQLDatabase_SINK_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "project1sqltargetdb"
		},
		"AzureSQLDatabase_SINK_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "project1"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlob_realistic_customers')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlob_realistic_customers_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSql_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzurePostgreSql",
				"version": "1.0",
				"typeProperties": {
					"connectionString": "[parameters('AzurePostgreSql_SOURCE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLDatabase_SINK')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSQLDatabase_SINK_properties_typeProperties_server')]",
					"database": "[parameters('AzureSQLDatabase_SINK_properties_typeProperties_database')]",
					"encrypt": "optional",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSQLDatabase_SINK_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSQLDatabase_SINK_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDB_Database_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDB_Database_SOURCE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSql_orderdetails_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql_SOURCE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "orderdetailid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "orderid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "productid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "quantity",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "price",
						"type": "numeric",
						"precision": 10,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "orderdetails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzurePostgreSql_orders_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzurePostgreSql_SOURCE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzurePostgreSqlTable",
				"schema": [
					{
						"name": "orderid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "customerid",
						"type": "integer",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "orderdate",
						"type": "timestamp without time zone",
						"precision": 0,
						"scale": 0
					},
					{
						"name": "paymentstatus",
						"type": "character varying",
						"precision": 0,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "public",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzurePostgreSql_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_AlternateEmails_SINK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQLDatabase_SINK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "AlternateEmailID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "EmailAddress",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "AlternateEmails"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDatabase_SINK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_ConversationMessages_SINK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQLDatabase_SINK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ConversationID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SupportAgent",
						"type": "varchar"
					},
					{
						"name": "MessageSender",
						"type": "varchar"
					},
					{
						"name": "Message",
						"type": "text"
					},
					{
						"name": "Timestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ConversationMessages"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDatabase_SINK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_Conversations_SINK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQLDatabase_SINK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ConversationID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Conversations"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDatabase_SINK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_Customer_SINK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQLDatabase_SINK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					},
					{
						"name": "PrimaryEmailAddress",
						"type": "varchar"
					},
					{
						"name": "PhoneNumber",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDatabase_SINK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_Orders_SINK')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQLDatabase_SINK",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "OrderID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PaymentStatus",
						"type": "varchar"
					},
					{
						"name": "OrderTotal",
						"type": "decimal",
						"precision": 10,
						"scale": 2
					},
					{
						"name": "OrderDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQLDatabase_SINK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BlobStorage_realistic_customers_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlob_realistic_customers",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "realistic_customers.csv",
						"container": "historicaldata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CustomerID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Email",
						"type": "String"
					},
					{
						"name": "Phone",
						"type": "String"
					},
					{
						"name": "LastPurchaseDate",
						"type": "String"
					},
					{
						"name": "TotalSpent",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlob_realistic_customers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDb_Products_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDB_Database_SOURCE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"ProductID": {
							"type": "integer"
						},
						"ProductName": {
							"type": "string"
						},
						"Price": {
							"type": "number"
						}
					}
				},
				"typeProperties": {
					"collectionName": "Products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDB_Database_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CosmosDb_RealisticCustomers_SOURCE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CosmosDB_Database_SOURCE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "CosmosDbSqlApiCollection",
				"schema": {
					"type": "object",
					"properties": {
						"CustomerID": {
							"type": "integer"
						},
						"Profile": {
							"type": "object",
							"properties": {
								"FirstName": {
									"type": "string"
								},
								"LastName": {
									"type": "string"
								},
								"Email": {
									"type": "string"
								}
							}
						},
						"Conversations": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"ConversationID": {
										"type": "string"
									},
									"Messages": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"DateTime": {
													"type": "string"
												},
												"Sender": {
													"type": "string"
												},
												"Message": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				},
				"typeProperties": {
					"collectionName": "RealisticCustomers"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CosmosDB_Database_SOURCE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_project1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzurePostgreSql_orderdetails_SOURCE",
								"type": "DatasetReference"
							},
							"name": "orderdetailsPGSQL"
						},
						{
							"dataset": {
								"referenceName": "AzurePostgreSql_orders_SOURCE",
								"type": "DatasetReference"
							},
							"name": "ordersPGSQL"
						},
						{
							"dataset": {
								"referenceName": "BlobStorage_realistic_customers_SOURCE",
								"type": "DatasetReference"
							},
							"name": "realisticCustomersBlob"
						},
						{
							"dataset": {
								"referenceName": "CosmosDb_Products_SOURCE",
								"type": "DatasetReference"
							},
							"name": "productsCosmos"
						},
						{
							"dataset": {
								"referenceName": "CosmosDb_RealisticCustomers_SOURCE",
								"type": "DatasetReference"
							},
							"name": "realisticCustomersCosmos"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_AlternateEmails_SINK",
								"type": "DatasetReference"
							},
							"name": "AlternateEmailsSink"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Conversations_SINK",
								"type": "DatasetReference"
							},
							"name": "ConversationSink"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_ConversationMessages_SINK",
								"type": "DatasetReference"
							},
							"name": "ConversationMessages"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Customer_SINK",
								"type": "DatasetReference"
							},
							"name": "CustomerSink"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_Orders_SINK",
								"type": "DatasetReference"
							},
							"name": "OrdersSink"
						}
					],
					"transformations": [
						{
							"name": "PhoneFormatting"
						},
						{
							"name": "LeftOuterCustomerID"
						},
						{
							"name": "EmailAddress"
						},
						{
							"name": "ConvFlow"
						},
						{
							"name": "ConvFlatten"
						},
						{
							"name": "ConversationIDFormatINT"
						},
						{
							"name": "INTConversationID"
						},
						{
							"name": "ConvMessageFlow"
						},
						{
							"name": "MessagesFlatten"
						},
						{
							"name": "ConvMessageSelect"
						},
						{
							"name": "CustomerFlow"
						},
						{
							"name": "CustomerIDFlow"
						},
						{
							"name": "LeftOuterProducts"
						},
						{
							"name": "TotalPriceQunatityPerProduct"
						},
						{
							"name": "OrderFlow"
						},
						{
							"name": "OrderIDAggregateTotalPrice"
						},
						{
							"name": "LeftOuterOrderIDAggregate"
						},
						{
							"name": "OrderSink"
						},
						{
							"name": "DecimalTotalPricePerOrderID"
						},
						{
							"name": "UpsertCustomerIDAlternateEmails"
						},
						{
							"name": "UpsertCustomerIDCustomers"
						},
						{
							"name": "UpsertConversationIDConversationMessages"
						},
						{
							"name": "UpsertConversationIDCustomerIDConversations"
						},
						{
							"name": "UpsertOrderIDCustomerIDOrders"
						}
					],
					"scriptLines": [
						"source(output(",
						"          orderdetailid as integer,",
						"          orderid as integer,",
						"          productid as integer,",
						"          quantity as integer,",
						"          price as decimal(10,2)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> orderdetailsPGSQL",
						"source(output(",
						"          orderid as integer,",
						"          customerid as integer,",
						"          orderdate as timestamp,",
						"          paymentstatus as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ordersPGSQL",
						"source(output(",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          LastPurchaseDate as string,",
						"          TotalSpent as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> realisticCustomersBlob",
						"source(output(",
						"          ProductID as integer,",
						"          ProductName as string,",
						"          Price as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'document') ~> productsCosmos",
						"source(output(",
						"          CustomerID as integer,",
						"          Profile as (FirstName as string, LastName as string, Email as string),",
						"          Conversations as (ConversationID as string, Messages as (DateTime as timestamp, Message as string, Sender as string, SupportAgent as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'document') ~> realisticCustomersCosmos",
						"realisticCustomersBlob derive(PhoneFormatted = concat(",
						"    substring(",
						"        iif(",
						"            length(regexReplace(Phone, '[^0-9]', '')) < 10,",
						"            concat(",
						"                regexReplace(Phone, '[^0-9]', ''),",
						"                substring('XXXXXXXXXX', 1, 10 - length(regexReplace(Phone, '[^0-9]', '')))",
						"            ),",
						"            regexReplace(Phone, '[^0-9]', '')",
						"        ),",
						"        1, 3",
						"    ),",
						"    '-',",
						"    substring(",
						"        iif(",
						"            length(regexReplace(Phone, '[^0-9]', '')) < 10,",
						"            concat(",
						"                regexReplace(Phone, '[^0-9]', ''),",
						"                substring('XXXXXXXXXX', 1, 10 - length(regexReplace(Phone, '[^0-9]', '')))",
						"            ),",
						"            regexReplace(Phone, '[^0-9]', '')",
						"        ),",
						"        4, 3",
						"    ),",
						"    '-',",
						"    substring(",
						"        iif(",
						"            length(regexReplace(Phone, '[^0-9]', '')) < 10,",
						"            concat(",
						"                regexReplace(Phone, '[^0-9]', ''),",
						"                substring('XXXXXXXXXX', 1, 10 - length(regexReplace(Phone, '[^0-9]', '')))",
						"            ),",
						"            regexReplace(Phone, '[^0-9]', '')",
						"        ),",
						"        7, 4",
						"    )",
						")) ~> PhoneFormatting",
						"realisticCustomersCosmos, PhoneFormatting join(realisticCustomersCosmos@CustomerID == realisticCustomersBlob@CustomerID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftOuterCustomerID",
						"LeftOuterCustomerID derive(PrimaryEmailAddress = iif(regexMatch(Profile.Email, '^[a-zA-Z0-9\\\\.]+@[a-zA-Z0-9]+\\\\.[a-zA-Z0-9]+$'), Profile.Email, 'Primary Email is Invalid'),",
						"          AlternateEmailAddress = iif(Email == Profile.Email, \"No Alternate Email Address\", Email)) ~> EmailAddress",
						"LeftOuterCustomerID select(mapColumn(",
						"          CustomerID = realisticCustomersCosmos@CustomerID,",
						"          Conversations",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ConvFlow",
						"ConvFlow foldDown(unroll(Conversations),",
						"     mapColumn(",
						"          CustomerID,",
						"          Conversations",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> ConvFlatten",
						"ConvFlatten derive(ConversationIDFormatINT = regexReplace(Conversations.ConversationID, '[^0-9]', '')) ~> ConversationIDFormatINT",
						"ConversationIDFormatINT cast(output(",
						"          ConversationIDFormatINT as integer",
						"     ),",
						"     errors: true) ~> INTConversationID",
						"INTConversationID select(mapColumn(",
						"          Messages = Conversations.Messages,",
						"          ConversationIDFormatINT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ConvMessageFlow",
						"ConvMessageFlow foldDown(unroll(Messages, Messages),",
						"     mapColumn(",
						"          Messages,",
						"          ConversationIDFormatINT",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> MessagesFlatten",
						"MessagesFlatten select(mapColumn(",
						"          Message = Messages.Message,",
						"          ConversationIDFormatINT,",
						"          SupportAgent = Messages.SupportAgent,",
						"          Sender = Messages.Sender,",
						"          DateTime = Messages.DateTime",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ConvMessageSelect",
						"EmailAddress select(mapColumn(",
						"          CustomerID = realisticCustomersCosmos@CustomerID,",
						"          PhoneFormatted,",
						"          PrimaryEmailAddress,",
						"          FirstName = Profile.FirstName,",
						"          LastName = Profile.LastName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CustomerFlow",
						"LeftOuterCustomerID select(mapColumn(",
						"          CustomerID = realisticCustomersCosmos@CustomerID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CustomerIDFlow",
						"orderdetailsPGSQL, productsCosmos join(orderdetailsPGSQL@productid == productsCosmos@ProductID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftOuterProducts",
						"LeftOuterProducts derive(totalPriceQuantityPerProduct = multiply(productsCosmos@Price, quantity)) ~> TotalPriceQunatityPerProduct",
						"TotalPriceQunatityPerProduct select(mapColumn(",
						"          orderid,",
						"          totalPriceQuantity = totalPriceQuantityPerProduct",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OrderFlow",
						"OrderFlow aggregate(groupBy(orderid),",
						"     totalPricePerOrderID = sum(totalPriceQuantity)) ~> OrderIDAggregateTotalPrice",
						"ordersPGSQL, OrderIDAggregateTotalPrice join(ordersPGSQL@orderid == OrderIDAggregateTotalPrice@orderid,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> LeftOuterOrderIDAggregate",
						"LeftOuterOrderIDAggregate select(mapColumn(",
						"          orderid = ordersPGSQL@orderid,",
						"          customerid,",
						"          orderdate,",
						"          paymentstatus,",
						"          totalPricePerOrderID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> OrderSink",
						"OrderSink cast(output(",
						"          totalPricePerOrderID as decimal(10,0)",
						"     ),",
						"     errors: true) ~> DecimalTotalPricePerOrderID",
						"EmailAddress alterRow(upsertIf(true())) ~> UpsertCustomerIDAlternateEmails",
						"CustomerFlow alterRow(upsertIf(true())) ~> UpsertCustomerIDCustomers",
						"ConvMessageSelect alterRow(upsertIf(true())) ~> UpsertConversationIDConversationMessages",
						"INTConversationID alterRow(upsertIf(true())) ~> UpsertConversationIDCustomerIDConversations",
						"DecimalTotalPricePerOrderID alterRow(upsertIf(true())) ~> UpsertOrderIDCustomerIDOrders",
						"UpsertCustomerIDAlternateEmails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          AlternateEmailID as integer,",
						"          CustomerID as integer,",
						"          EmailAddress as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CustomerID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          AlternateEmailID = realisticCustomersBlob@CustomerID,",
						"          CustomerID = realisticCustomersCosmos@CustomerID,",
						"          EmailAddress = Email",
						"     )) ~> AlternateEmailsSink",
						"UpsertConversationIDCustomerIDConversations sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ConversationID as integer,",
						"          CustomerID as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CustomerID','ConversationID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ConversationID = ConversationIDFormatINT,",
						"          CustomerID",
						"     )) ~> ConversationSink",
						"UpsertConversationIDConversationMessages sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ConversationID as integer,",
						"          SupportAgent as string,",
						"          MessageSender as string,",
						"          Message as string,",
						"          Timestamp as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ConversationID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ConversationID = ConversationIDFormatINT,",
						"          SupportAgent,",
						"          MessageSender = Sender,",
						"          Message,",
						"          Timestamp = DateTime",
						"     )) ~> ConversationMessages",
						"UpsertCustomerIDCustomers sink(allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     input(",
						"          CustomerID as integer,",
						"          FirstName as string,",
						"          LastName as string,",
						"          PrimaryEmailAddress as string,",
						"          PhoneNumber as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CustomerID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          FirstName,",
						"          LastName,",
						"          PrimaryEmailAddress,",
						"          PhoneNumber = PhoneFormatted",
						"     )) ~> CustomerSink",
						"UpsertOrderIDCustomerIDOrders sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          OrderID as integer,",
						"          CustomerID as integer,",
						"          PaymentStatus as string,",
						"          OrderTotal as decimal(10,2),",
						"          OrderDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['OrderID','CustomerID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          OrderID = orderid,",
						"          CustomerID = customerid,",
						"          PaymentStatus = paymentstatus,",
						"          OrderTotal = totalPricePerOrderID,",
						"          OrderDate = orderdate",
						"     )) ~> OrdersSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzurePostgreSql_orderdetails_SOURCE')]",
				"[concat(variables('factoryId'), '/datasets/AzurePostgreSql_orders_SOURCE')]",
				"[concat(variables('factoryId'), '/datasets/BlobStorage_realistic_customers_SOURCE')]",
				"[concat(variables('factoryId'), '/datasets/CosmosDb_Products_SOURCE')]",
				"[concat(variables('factoryId'), '/datasets/CosmosDb_RealisticCustomers_SOURCE')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_AlternateEmails_SINK')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Conversations_SINK')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_ConversationMessages_SINK')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Customer_SINK')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_Orders_SINK')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_project1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Project1DataFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_project1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"orderdetailsPGSQL": {},
									"ordersPGSQL": {},
									"realisticCustomersBlob": {},
									"productsCosmos": {},
									"realisticCustomersCosmos": {},
									"AlternateEmailsSink": {},
									"ConversationSink": {},
									"ConversationMessages": {},
									"CustomerSink": {},
									"OrdersSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_project1')]"
			]
		}
	]
}